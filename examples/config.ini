; Dimension de l'espace, et s'il y a des conditions aux bords, sinon si c'est une sphére ou équivalent
[space]
ndim=1
boundary=pbc
limits=[-10,10]


[sampling]
ntrajs=5
dt=1e-3
nsteps=5000
integration=EM ; Integrateur to use #type=md/overdamped/Langevin/GLE/GLE_hidden ; en fait le type va avec l'intégrateur
; Pour les intégrateur avec mémoire le type est inclut, soit on aura aboba_hidden, soit aboba_kernel
; Génération des conditions initials
seed=
[init_position]
type=gaussian
mean=0.0
std=1.0

[init_velocity]
type=gaussian
mean=0.0
std=1.0

[physics]
force=  ..  #Si il y a un argument force, il prend précéence sur le potential, sinon on calcule juste la force à partir du potentiel
; ou bien
potential=..
#Si on veut une expression alors on ouvre un code julia et on la tape, pas gèré ici

memory=.. ; soit un fichier, soit un tuple, "type",coeffs soit une expression (et ça dépend du choix de l'intégrateur)
on va avoir "exp",k,\tau
; Comment on calcule les forces
[force] ; En fait il faudrait un argument unique et selonle type de l'argument on choisit,
;donc soit un nom de potentiel déjà implémenté, un nom de fichier ou une expression julia
; et soir on donne le potentiel soit la force

[bath]

temperature=1.0
friction=1.0


; Si c'est GLE ça doit donner un moyen de générer le noyau mémoire
[memory]


;Si c'est la GLE avec variables cachées
[hidden]


;Les parameters pour la sortie des trajs
[dump]
file=; either false or path to folder
name_pattern= ; put star for number of the traj
every=



; Les parametres pour savoir ce qu'on affiche
[logging]

; Pour rajouter des bias, mais en vrai le mieux ça serait de le connecter à plumed
;(pour les dim > 3, on peut juste créer plusieurs atomes dans plumed
; et on compléte les dimensions manquantespour arriver à 3n par des zéros)
; Pareil pour le committor, en fait c'est vachement plus simple si c'est connecté à plumed qui peut gérer ça
