var documenterSearchIndex = {"docs":
[{"location":"plumed/#Plumed-for-LangevinIntegrators","page":"Plumed","title":"Plumed for LangevinIntegrators","text":"","category":"section"},{"location":"plumed/","page":"Plumed","title":"Plumed","text":"The integrator can be coupled to Plumed (https://www.plumed.org/). Plumed should be set up a priori in your system. The library should be accessible at (pre)compile time, to test it run ldd <path to>/lib/libplumed.so  where <path to> is the path used as argument in the configure of plumed. Usually /usr/local. If that does not work add plumed library path to LDLIBRARYPATH. In general, it should work out of the box when plumed is installed in standard location. In case we need to specify location of plumed include file, we can use environment variable PLUMEDINCLUDEPATH to setup the path to PLUMEDINCLUDEPATH/plumed/wrapper/Plumed.h","category":"page"},{"location":"plumed/","page":"Plumed","title":"Plumed","text":"It have been tested with Plumed v2.5 to 2.7.","category":"page"},{"location":"plumed/","page":"Plumed","title":"Plumed","text":"As plumed consider to observe a 3D system of N atoms, the coordinate of the system are feeded to plumed as (for a 5D systems)","category":"page"},{"location":"plumed/","page":"Plumed","title":"Plumed","text":"(x1,x2,x3) (x4,x_5,0)","category":"page"},{"location":"plumed/","page":"Plumed","title":"Plumed","text":"Extra coordinate are set to zero. Then coordinate can be obtained in plumed via the POSITION keyword, using ATOM=1 to get the first three coordinates in x,y,z, and so forth.","category":"page"},{"location":"plumed/","page":"Plumed","title":"Plumed","text":"Note that Plumed add a significant overhead to the run time. So depending of your need that could be a good move to implemented the needed functionnality into a Fix (see fix.jl for examples).","category":"page"},{"location":"plumed/","page":"Plumed","title":"Plumed","text":"To use this plumed extension you should have import the LangevinIntegratorsPlumedExt module","category":"page"},{"location":"plumed/","page":"Plumed","title":"Plumed","text":"","category":"page"},{"location":"plumed/","page":"Plumed","title":"Plumed","text":"Modules = [LangevinIntegratorsPlumedExt]","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LangevinIntegrators","category":"page"},{"location":"#LangevinIntegrators","page":"Home","title":"LangevinIntegrators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LangevinIntegrators.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LangevinIntegrators]","category":"page"},{"location":"#LangevinIntegrators.ABOBA-Union{Tuple{TM}, Tuple{TF}, Tuple{FP}, Tuple{FP, TF, TF, TM, TF}, Tuple{FP, TF, TF, TM, TF, Int64}, Tuple{FP, TF, TF, TM, TF, Int64, Union{Nothing, LangevinIntegrators.AbstractSpace}}} where {FP<:LangevinIntegrators.AbstractForce, TF<:AbstractFloat, TM}","page":"Home","title":"LangevinIntegrators.ABOBA","text":"ABOBA(force, β, γ, M, Δt)\n\nSet up the ABOBA integrator for inertial Langevin.\n\nFields\n\nforce   - In place gradient of the potential\nβ     - Inverse temperature\nγ     - Damping Coefficient\nM     - Mass (either scalar or vector)\nΔt    - Time step\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.ABOBA_Hidden-Union{Tuple{TF}, Tuple{FP}, Tuple{FP, Array{TF}, Array{TF}, TF, Int64}, Tuple{FP, Array{TF}, Array{TF}, TF, Int64, Union{Nothing, LangevinIntegrators.AbstractSpace}}} where {FP<:LangevinIntegrators.AbstractForce, TF<:AbstractFloat}","page":"Home","title":"LangevinIntegrators.ABOBA_Hidden","text":"ABOBA_Hidden(force, β, γ, M, Δt)\n\nSet up the ABOBA_Hidden integrator for underdamped Langevin with hidden variables.\n\nFields\n\nforce   - In place gradient of the potential\nβ     - Inverse temperature\nγ     - Damping Coefficient\nM     - Mass (either scalar or vector)\nΔt    - Time step\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.BAOAB-Union{Tuple{TM}, Tuple{TF}, Tuple{FP}, Tuple{FP, TF, TF, TM, TF}, Tuple{FP, TF, TF, TM, TF, Int64}, Tuple{FP, TF, TF, TM, TF, Int64, Union{Nothing, LangevinIntegrators.AbstractSpace}}} where {FP<:LangevinIntegrators.AbstractForce, TF<:AbstractFloat, TM}","page":"Home","title":"LangevinIntegrators.BAOAB","text":"BAOAB(force, β, γ, M, Δt)\n\nSet up the BAOAB integrator for inertial Langevin.\n\nFields\n\nforce   - In place gradient of the potential\nβ     - Inverse temperature\nγ     - Damping Coefficient\nM     - Mass (either scalar or vector)\nΔt    - Time step\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.BBK-Union{Tuple{TM}, Tuple{TF}, Tuple{FP}, Tuple{FP, TF, TF, TM, TF}, Tuple{FP, TF, TF, TM, TF, Int64}, Tuple{FP, TF, TF, TM, TF, Int64, Union{Nothing, LangevinIntegrators.AbstractSpace}}} where {FP<:LangevinIntegrators.AbstractForce, TF<:AbstractFloat, TM}","page":"Home","title":"LangevinIntegrators.BBK","text":"BBK(force, β, γ, M, Δt)\n\nSet up the BBK integrator for inertial Langevin.\n\nFields\n\nforce   - In place gradient of the potential\nβ     - Inverse temperature\nγ     - Damping Coefficient\nM     - Mass (either scalar or vector)\nΔt    - Time step\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.BBK_Kernel-Union{Tuple{TM}, Tuple{TF}, Tuple{FP}, Tuple{FP, TF, Array{TF}, TM, TF}, Tuple{FP, TF, Array{TF}, TM, TF, Int64}, Tuple{FP, TF, Array{TF}, TM, TF, Int64, Union{Nothing, LangevinIntegrators.AbstractSpace}}} where {FP<:LangevinIntegrators.AbstractForce, TF<:AbstractFloat, TM}","page":"Home","title":"LangevinIntegrators.BBK_Kernel","text":"BBK_Kernel(force, β, γ, M, Δt)\n\nSet up the BBK_Kernel integrator for generalized Langevin.\n\nAdapted from Iterative Reconstruction of Memory Kernels Gerhard Jung,,†,‡ Martin Hanke,,§ and Friederike Schmid*,†\n\nFields\n\nforce   - In place gradient of the potential\nβ     - Inverse temperature\nγ     - Damping Coefficient\nM     - Mass (either scalar or vector)\nΔt    - Time step\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.EM-Union{Tuple{TF}, Tuple{FP}, Tuple{FP, TF, TF}, Tuple{FP, TF, TF, Int64}, Tuple{FP, TF, TF, Int64, Union{Nothing, LangevinIntegrators.AbstractSpace}}} where {FP<:LangevinIntegrators.AbstractForce, TF<:AbstractFloat}","page":"Home","title":"LangevinIntegrators.EM","text":"EM(force, β, Δt)\n\nSet up the EM integrator for overdamped Langevin.\n\nFields\n\nforce   - In place gradient of the potential\nβ     - Inverse temperature\nΔt    - Time step\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.ForceFromScipySplines","page":"Home","title":"LangevinIntegrators.ForceFromScipySplines","text":"Careful ForceFromScipySplines is not threadsafe\n\n\n\n\n\n","category":"type"},{"location":"#LangevinIntegrators.GJF_Kernel-Union{Tuple{TM}, Tuple{TF}, Tuple{FP}, Tuple{FP, TF, Array{TF}, TM, TF}, Tuple{FP, TF, Array{TF}, TM, TF, Int64}, Tuple{FP, TF, Array{TF}, TM, TF, Int64, Union{Nothing, LangevinIntegrators.AbstractSpace}}} where {FP<:LangevinIntegrators.AbstractForce, TF<:AbstractFloat, TM}","page":"Home","title":"LangevinIntegrators.GJF_Kernel","text":"GJF_Kernel(force, β, γ, M, Δt)\n\nSet up the G-JF integrator for inertial Langevin.\n\nAdapted from Iterative Reconstruction of Memory Kernels Gerhard Jung,,†,‡ Martin Hanke,,§ and Friederike Schmid*,†\n\nFields\n\nforce   - In place gradient of the potential\nβ     - Inverse temperature\nγ     - Damping Coefficient\nM     - Mass (either scalar or vector)\nΔt    - Time step\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.SeparateSpace","page":"Home","title":"LangevinIntegrators.SeparateSpace","text":"When we want to appy boundary conditions, define a SeparateSpace, that hold one BC or constraints per dimension. That can hold a constraints on some dimension if needed\n\n\n\n\n\n","category":"type"},{"location":"#LangevinIntegrators.TrajsParams-Tuple{}","page":"Home","title":"LangevinIntegrators.TrajsParams","text":"TrajsParams(;n_steps = 10^4, n_save_iters=1)\n\nSet options for samplers.\n\nFields\n\nn_steps       - Set the number of iterations of the integrator\nn_trajs       - Set the number of trajectories to run\nnsaveiters  - Set the frequency at which iterations are saved.  If                 nsaveiters=1, every iteration is saved.  If nsaveiters=n_steps,                 only the final iteration is saved.\nsavefilenamepattern - The pattern for saving the trajectories. If this include a *, that will be replaced by the id of the traj.\nverbose       - Verbose argument\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.VEC-Union{Tuple{TM}, Tuple{TF}, Tuple{FP}, Tuple{FP, TF, TF, TM, TF}, Tuple{FP, TF, TF, TM, TF, Int64}, Tuple{FP, TF, TF, TM, TF, Int64, Union{Nothing, LangevinIntegrators.AbstractSpace}}} where {FP<:LangevinIntegrators.AbstractForce, TF<:AbstractFloat, TM}","page":"Home","title":"LangevinIntegrators.VEC","text":"VEC(force, β, γ, M, Δt)\n\nSet up the Vanden-Eijnden Ciccotti integrator for inertial Langevin. Taken from \"Second-order integrators for Langevin equations with holonomic constraints\" doi: 10.1016/j.cplett.2006.07.086\n\nFields\n\nforce   - In place gradient of the potential\nβ     - Inverse temperature\nγ     - Damping Coefficient\nM     - Mass (either scalar or vector)\nΔt    - Time step\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.VelocityVerlet","page":"Home","title":"LangevinIntegrators.VelocityVerlet","text":"Verlet(force, M, Δt)\n\nSet up the Verlet integrator.\n\nFields\n\nforce   - In place gradient of the potential\nM     - Mass (either scalar or vector)\nΔt    - Time step\n\n\n\n\n\n","category":"type"},{"location":"#LangevinIntegrators.initialize_initcond-Tuple{Any, Any}","page":"Home","title":"LangevinIntegrators.initialize_initcond","text":"Function to initialize the init_cond Note si il n'y as pas ce qu'il faut ça va échouer silenciement, il faut mettre un verbose pour montrer ce qui est utilisé\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.run_trajectories-Tuple{S} where S<:LangevinIntegrators.AbstractIntegrator","page":"Home","title":"LangevinIntegrators.run_trajectories","text":"For launching a bunch of trajectories. For distributed computing see examples\n\n\n\n\n\n","category":"method"},{"location":"#LangevinIntegrators.run_trajectory!-Union{Tuple{S}, Tuple{IS}, Tuple{IS, S}, Tuple{IS, S, Union{Nothing, LangevinIntegrators.AbstractSave}}} where {IS<:LangevinIntegrators.AbstractState, S<:LangevinIntegrators.AbstractIntegrator}","page":"Home","title":"LangevinIntegrators.run_trajectory!","text":"run_trajectory!(state, integrator)\n\nevolve in time one trajectory starting at state and integrated by integrator\n\nFields\n\nstate   - Initial State\nintegrator    - Friction matrix\n\n\n\n\n\n","category":"method"}]
}
